var should = require('should')
var sinon = require('sinon')
var index = require('../../lib/index')

function errorHandler(message) {
  return {
    code: 'InvalidArgument',
    message: message,
  }
}

describe('Errors', function () {
  it('handle errors with a custom errorHandler', function (done) {
    var send = sinon.spy()
    var next = sinon.spy()
    var res = { send: send }
    // Note: this error must match what is generated by validation#createError
    var errors = {
      dummy: {
        scope: 'queries',
        field: 'dummy',
        type: 'MISSING',
        reason: 'Field is required',
      },
    }

    index.error.handle(errors, null, res, { errorHandler: errorHandler }, next)

    next.calledWith(false).should.be.ok()
    send
      .calledWith({
        code: 'InvalidArgument',
        message: 'dummy (MISSING): Field is required',
      })
      .should.be.ok()

    done()
  })

  it('handle errors object', function (done) {
    var send = sinon.spy()
    var next = sinon.spy()
    var res = { send: send }
    var errors = {}

    index.error.handle(errors, null, res, {}, next)

    next.calledWith(false).should.be.ok()
    send
      .calledWith(409, {
        code: 'InvalidArgument',
        message: 'Validation failed',
        errors: errors,
      })
      .should.be.ok()

    done()
  })

  it('handle errors array', function (done) {
    var send = sinon.spy()
    var next = sinon.spy()
    var res = { send: send }
    var errors = []

    index.error.handle(errors, null, res, {}, next)

    next.calledWith(false).should.be.ok()
    send
      .calledWith(409, {
        code: 'InvalidArgument',
        message: 'Validation failed',
        errors: errors,
      })
      .should.be.ok()

    done()
  })
})
